// Copyright 2019 The Flutter team. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: fonts.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Details required for a checked download
// A Downloadable Font will typically have a hash but no filename.
// A System Font will typically have only a filename.
// Hash is 20 bytes sha1 up to v12, 32 byte sha256 for v13+,
type FileSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	FileSize *int64  `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Hash     []byte  `protobuf:"bytes,3,opt,name=hash" json:"hash,omitempty"`
}

func (x *FileSpec) Reset() {
	*x = FileSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fonts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSpec) ProtoMessage() {}

func (x *FileSpec) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSpec.ProtoReflect.Descriptor instead.
func (*FileSpec) Descriptor() ([]byte, []int) {
	return file_fonts_proto_rawDescGZIP(), []int{0}
}

func (x *FileSpec) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *FileSpec) GetFileSize() int64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *FileSpec) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// To allow expression of variation font capability, e.g. weight 300-700
type IntRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *int32 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End   *int32 `protobuf:"varint,2,opt,name=end,def=0" json:"end,omitempty"`
}

// Default values for IntRange fields.
const (
	Default_IntRange_End = int32(0)
)

func (x *IntRange) Reset() {
	*x = IntRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fonts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntRange) ProtoMessage() {}

func (x *IntRange) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntRange.ProtoReflect.Descriptor instead.
func (*IntRange) Descriptor() ([]byte, []int) {
	return file_fonts_proto_rawDescGZIP(), []int{1}
}

func (x *IntRange) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *IntRange) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return Default_IntRange_End
}

// To allow expression of variation font capability, e.g. weight 300-700
// If end is <= start it's a point (e.g. for a non-variational font).
// Where possible prefer end = 0 for point to save the field in binary proto.
type FloatRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *float32 `protobuf:"fixed32,1,opt,name=start" json:"start,omitempty"`
	End   *float32 `protobuf:"fixed32,2,opt,name=end,def=0" json:"end,omitempty"`
}

// Default values for FloatRange fields.
const (
	Default_FloatRange_End = float32(0)
)

func (x *FloatRange) Reset() {
	*x = FloatRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fonts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRange) ProtoMessage() {}

func (x *FloatRange) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRange.ProtoReflect.Descriptor instead.
func (*FloatRange) Descriptor() ([]byte, []int) {
	return file_fonts_proto_rawDescGZIP(), []int{2}
}

func (x *FloatRange) GetStart() float32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *FloatRange) GetEnd() float32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return Default_FloatRange_End
}

// Describes a single optentype font file, which may be a variation font or a
// single font from a TTC.
type Font struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *FileSpec `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	// numeric weight per https://drafts.csswg.org/css-fonts/#propdef-font-weight
	// if varfont, range of 'wght' per
	// https://www.microsoft.com/typography/otspec/fvar.htm#VAT
	Weight *IntRange `protobuf:"bytes,2,opt,name=weight" json:"weight,omitempty"`
	// names converted to values per
	// https://www.microsoft.com/typography/otspec/os2.htm#wdc
	// if varfont, range of 'wdth' per
	// https://www.microsoft.com/typography/otspec/fvar.htm#VAT
	Width *FloatRange `protobuf:"bytes,3,opt,name=width" json:"width,omitempty"`
	// 0.0 or 1.0 per https://www.microsoft.com/typography/otspec/os2.htm#fss
	// bit 0. if varfont, range of 'ital' per
	// https://www.microsoft.com/typography/otspec/fvar.htm#VAT
	Italic *FloatRange `protobuf:"bytes,4,opt,name=italic" json:"italic,omitempty"`
	// Google Fonts doesn't have any [yet?] but Android does
	TtcIndex *int32 `protobuf:"varint,7,opt,name=ttc_index,json=ttcIndex" json:"ttc_index,omitempty"`
}

func (x *Font) Reset() {
	*x = Font{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fonts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Font) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Font) ProtoMessage() {}

func (x *Font) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Font.ProtoReflect.Descriptor instead.
func (*Font) Descriptor() ([]byte, []int) {
	return file_fonts_proto_rawDescGZIP(), []int{3}
}

func (x *Font) GetFile() *FileSpec {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Font) GetWeight() *IntRange {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *Font) GetWidth() *FloatRange {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *Font) GetItalic() *FloatRange {
	if x != nil {
		return x.Italic
	}
	return nil
}

func (x *Font) GetTtcIndex() int32 {
	if x != nil && x.TtcIndex != nil {
		return *x.TtcIndex
	}
	return 0
}

type FontFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version *int32  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// Even for a variation font we may have several entries, for example Roboto
	// as a varfont may
	// span two files, one for regular and one for italic
	Fonts []*Font `protobuf:"bytes,4,rep,name=fonts" json:"fonts,omitempty"`
}

func (x *FontFamily) Reset() {
	*x = FontFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fonts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FontFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FontFamily) ProtoMessage() {}

func (x *FontFamily) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FontFamily.ProtoReflect.Descriptor instead.
func (*FontFamily) Descriptor() ([]byte, []int) {
	return file_fonts_proto_rawDescGZIP(), []int{4}
}

func (x *FontFamily) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FontFamily) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *FontFamily) GetFonts() []*Font {
	if x != nil {
		return x.Fonts
	}
	return nil
}

// A set of potentially available families.
type Directory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sorted by name
	Family []*FontFamily `protobuf:"bytes,1,rep,name=family" json:"family,omitempty"`
	// sorted name lookup info for binary search
	// see go/fonts-gmscore-namelookup for bit packing scheme
	NameLookup []int32 `protobuf:"varint,2,rep,name=name_lookup,json=nameLookup" json:"name_lookup,omitempty"`
	// strings for full and postscript names, broken up.
	// see go/fonts-gmscore-namelookup.
	Strings []string `protobuf:"bytes,3,rep,name=strings" json:"strings,omitempty"`
	// Name-lookup style family + font indices to prefetch, highest priority
	// first.
	Prefetch []int32 `protobuf:"varint,4,rep,name=prefetch" json:"prefetch,omitempty"`
	Version  *int32  `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	// Description of current directory version.
	Description *string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
}

func (x *Directory) Reset() {
	*x = Directory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fonts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Directory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Directory) ProtoMessage() {}

func (x *Directory) ProtoReflect() protoreflect.Message {
	mi := &file_fonts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Directory.ProtoReflect.Descriptor instead.
func (*Directory) Descriptor() ([]byte, []int) {
	return file_fonts_proto_rawDescGZIP(), []int{5}
}

func (x *Directory) GetFamily() []*FontFamily {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *Directory) GetNameLookup() []int32 {
	if x != nil {
		return x.NameLookup
	}
	return nil
}

func (x *Directory) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *Directory) GetPrefetch() []int32 {
	if x != nil {
		return x.Prefetch
	}
	return nil
}

func (x *Directory) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Directory) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

var File_fonts_proto protoreflect.FileDescriptor

var file_fonts_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66,
	0x6f, 0x6e, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x35, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x13, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x37, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xd1, 0x01,
	0x0a, 0x04, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6f,
	0x6e, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a,
	0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x66, 0x6f, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x74, 0x63, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x74, 0x63,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x22, 0x5d, 0x0a, 0x0a, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x05, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66,
	0x6f, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x05, 0x66, 0x6f, 0x6e, 0x74, 0x73,
	0x22, 0xc9, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29,
	0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x34, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x74, 0x69, 0x73,
	0x69, 0x65, 0x6b, 0x70, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x66, 0x6f, 0x6e,
	0x74, 0x73, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x66, 0x6f, 0x6e,
	0x74, 0x73,
}

var (
	file_fonts_proto_rawDescOnce sync.Once
	file_fonts_proto_rawDescData = file_fonts_proto_rawDesc
)

func file_fonts_proto_rawDescGZIP() []byte {
	file_fonts_proto_rawDescOnce.Do(func() {
		file_fonts_proto_rawDescData = protoimpl.X.CompressGZIP(file_fonts_proto_rawDescData)
	})
	return file_fonts_proto_rawDescData
}

var file_fonts_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_fonts_proto_goTypes = []interface{}{
	(*FileSpec)(nil),   // 0: fonts.FileSpec
	(*IntRange)(nil),   // 1: fonts.IntRange
	(*FloatRange)(nil), // 2: fonts.FloatRange
	(*Font)(nil),       // 3: fonts.Font
	(*FontFamily)(nil), // 4: fonts.FontFamily
	(*Directory)(nil),  // 5: fonts.Directory
}
var file_fonts_proto_depIdxs = []int32{
	0, // 0: fonts.Font.file:type_name -> fonts.FileSpec
	1, // 1: fonts.Font.weight:type_name -> fonts.IntRange
	2, // 2: fonts.Font.width:type_name -> fonts.FloatRange
	2, // 3: fonts.Font.italic:type_name -> fonts.FloatRange
	3, // 4: fonts.FontFamily.fonts:type_name -> fonts.Font
	4, // 5: fonts.Directory.family:type_name -> fonts.FontFamily
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_fonts_proto_init() }
func file_fonts_proto_init() {
	if File_fonts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fonts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fonts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fonts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fonts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Font); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fonts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FontFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fonts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Directory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fonts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fonts_proto_goTypes,
		DependencyIndexes: file_fonts_proto_depIdxs,
		MessageInfos:      file_fonts_proto_msgTypes,
	}.Build()
	File_fonts_proto = out.File
	file_fonts_proto_rawDesc = nil
	file_fonts_proto_goTypes = nil
	file_fonts_proto_depIdxs = nil
}
